import random

# 1. List Operations
L = [10, 20, 30, 40, 50, 60, 70, 80]

# i. Add 200 and 300
L.append(200)
L.append(300)
print("List after adding 200 and 300:", L)

# ii. Remove 10 and 30
L.remove(10)
L.remove(30)
print("List after removing 10 and 30:", L)

# iii. Sort in ascending order
L.sort()
print("List sorted in ascending order:", L)

# iv. Sort in descending order
L.sort(reverse=True)
print("List sorted in descending order:", L)


# 2. Tuple Operations
scores = (45, 89.5, 76, 45.4, 89, 92, 58, 45)

# i. Highest score and index
max_score = max(scores)
max_index = scores.index(max_score)
print("Highest score:", max_score, "at index", max_index)

# ii. Lowest score and its count
min_score = min(scores)
min_count = scores.count(min_score)
print("Lowest score:", min_score, "appears", min_count, "times")

# iii. Reverse the tuple and return as list
reversed_tuple = list(reversed(scores))
print("Reversed tuple as list:", reversed_tuple)

# iv. Check if 76 is present
search_score = 76
if search_score in scores:
    print(f"Score {search_score} found at index", scores.index(search_score))
else:
    print(f"Score {search_score} is not present")


# 3. Random Number List
random_numbers = [random.randint(100, 900) for _ in range(100)]

# i. Odd numbers
odd_numbers = [num for num in random_numbers if num % 2 != 0]
print("Odd numbers:", odd_numbers)

# ii. Even numbers
even_numbers = [num for num in random_numbers if num % 2 == 0]
print("Even numbers:", even_numbers)

# iii. Prime numbers
def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True

prime_numbers = [num for num in random_numbers if is_prime(num)]
print("Prime numbers:", prime_numbers)


# 4. Set Operations
A = {34, 56, 78, 90}
B = {78, 45, 90, 23}

# i. Union
print("Unique scores (union):", A | B)

# ii. Intersection
print("Common scores (intersection):", A & B)

# iii. Symmetric difference
print("Exclusive scores (symmetric difference):", A ^ B)

# iv. Subset and Superset check
print("A is subset of B:", A.issubset(B))
print("B is superset of A:", B.issuperset(A))

# v. Remove a score from A
x = int(input("Enter a score to remove from A: "))
if x in A:
    A.remove(x)
    print(f"Score {x} removed from A:", A)
else:
    print(f"Score {x} is not present in A")


# 5. Dictionary Key Rename
location_dict = {"city": "New York", "country": "USA", "population": 8419000}

# Rename key "city" to "location"
location_dict["location"] = location_dict.pop("city")
print("Updated dictionary:", location_dict)
